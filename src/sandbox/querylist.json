[
    {
        "endpoint"  : "/version",
        "description" : "Returns version and git commit information about the currently deployed Ardana API",
        "method" : "GET"
    },
    {
        "endpoint"  : "/templates",
        "description" : "Return list of the available examples (cloud types) from the examples folder",
        "method" : "GET"
    },
    {
        "endpoint"  : "/templates/{id}",
        "description" : "Returns the Input Model for the specified example.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/config_processor",
        "description" : "Runs the config processor synchronously (directly runs the python script, not the playbook). This is useful for validating the current input model.",
        "method" : "POST"
    },
    {
        "endpoint"  : "/playbooks",
        "description" : "List Ansible playbooks we can run by posting to /playbooks/{playbook}.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/playbooks/{playbook}",
        "description" : "Create and start an ansible-playbook process for the playbook specified",
        "method" : "POST"
    },
    {
        "endpoint"  : "/plays",
        "description" : "List metadata about all ansible plays (live and finished).",
        "method" : "GET"
    },
    {
        "endpoint"  : "/plays/{pref}",
        "description" : "Get metadata about the specified ansible play referencer",
        "method" : "GET"
    },
    {
        "endpoint"  : "/plays/{pref}/log",
        "description" : "Gets the log for the specified ansible play reference",
        "method" : "GET"
    },
    {
        "endpoint"  : "/plays/{pref}",
        "description" : "Kills the ansible play process identified by the specified process reference, if it is active.",
        "method" : "DELETE"
    },
    {
        "endpoint"  : "/model",
        "description" : "Returns the current Input Model. The returned JSON include metadata about the model as well as the Input Model data.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/is_encrypted",
        "description" : "Indicates whether the readied config processor output was encrypted or not.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model",
        "description" : "Replaces the input model on disk with the supplied JSON.",
        "method" : "POST"
    },
    {
        "endpoint"  : "/model/state",
        "description" : "Gets a state representing the current state of the input model This state relates to git status",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/history",
        "description" : "Gets the history of the model from the git commit log.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/commit",
        "description" : "Commits the current input model changes to the git repository.",
        "method" : "POST"
    },
    {
        "endpoint"  : "/model/changes",
        "description" : "Resets (cleans) the input model. This performs a git reset, to reset the input model to the last git commit.",
        "method" : "DELETE"
    },
    {
        "endpoint"  : "/model/entities",
        "description" : "List top-level configuration entities currently in the input model e.g. servers, disk-models, networks, server-roles etc. and associated valid sub-routes",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/entities/{entity}",
        "description" : "Get a whole entity",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/entities/{entity}",
        "description" : "Replace a whole entity",
        "method" : "PUT"
    },
    {
        "endpoint"  : "/model/entities/{entity}",
        "description" : "Add an entry to an array-type entity",
        "method" : "POST"
    },
    {
        "endpoint"  : "/model/entities/{entity}/{id}",
        "description" : "Get an individual entry by ID (name or index) from an array-type entity",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/entities/{entity}/{id}",
        "description" : "Update an individual entry by ID (name or index) from an array-type entity",
        "method" : "PUT"
    },
    {
        "endpoint"  : "/model/entities/{entity}/{id}",
        "description" : "Delete an individual entry by ID (name or index) from an array-type entity",
        "method" : "DELETE"
    },
    {
        "endpoint"  : "/model/cp_output/{path}",
        "description" : "List config processer info output in ~/scratch/cp/my_cloud/stage/info.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/config/{path}",
        "description" : "List config entities available in ~/helion/my_cloud/config.",
        "method" : "GET"
    },
    {
        "endpoint"  : "/model/config/{path}",
        "description" : "Update a config entity in ~/helion/my_cloud/config. The path to the editable entity must be specified. The body must be directly the new text for the file (no envelope).",
        "method" : "PUT"
    },
    {
        "endpoint"  : "/osinstall",
        "description" : "Start installation of OS on specified nodes.",
        "method" : "POST"
    },
    {
        "endpoint"  : "/osinstall",
        "description" : "Get status of OS installation for all servers having the OS installed.",
        "method" : "GET"
    }
]